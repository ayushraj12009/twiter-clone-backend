package com.ayush.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ayush.dto.UserDto;
import com.ayush.exception.UserException;
import com.ayush.mapper.UserDtoMapper;
import com.ayush.model.User;
import com.ayush.service.UserService;
import com.ayush.util.UserUtil;

@RestController
@RequestMapping("/api/users")
public class UserController {
	
	@Autowired
	private UserService userService;

	@GetMapping("/profile")
	public ResponseEntity<UserDto> getUserProfile(@RequestHeader("Authorization")
	String jwt) throws UserException{
		
		User user = userService.findUserProfileByJwt(jwt);
		UserDto userDto = UserDtoMapper.toUserDto(user);
		userDto.setReq_user(true);
		return new ResponseEntity<UserDto>(userDto, HttpStatus.ACCEPTED);
		
	}
	
	@GetMapping("/{userId}")
	public ResponseEntity<UserDto> getUserById( @PathVariable Long userId,
			@RequestHeader("Authorization") String jwt)
			throws UserException{
		
		User requser = userService.findUserProfileByJwt(jwt);
		User user = userService.findUserById(userId);
		UserDto userDto = UserDtoMapper.toUserDto(user);
		userDto.setReq_user(UserUtil.isReqUser(requser, user));
		userDto.setFollowed(UserUtil.isFollwedByReqUser(requser, user));
		return new ResponseEntity<UserDto>(userDto, HttpStatus.ACCEPTED);
		
	}
	
	@GetMapping("/{searchUser}")
	public ResponseEntity<UserDto> searchUser( @RequestParam String query,
			@RequestHeader("Authorization") String jwt)
			throws UserException{
		
		User requser = userService.findUserProfileByJwt(jwt);
		
		List<User> users = userService.searchUser(query);
		
		List<UserDto> userDto = UserDtoMapper.toUserDtos(users);
		userDto.setReq_user(UserUtil.isReqUser(requser, user));
		userDto.setFollowed(UserUtil.isFollwedByReqUser(requser, user));
		return new ResponseEntity<UserDto>(userDto, HttpStatus.ACCEPTED);
		
	}

}
